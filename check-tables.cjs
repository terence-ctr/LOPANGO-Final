const { Sequelize } = require('sequelize');
const path = require('path');

async function checkTables() {
  try {
    // Cr√©er une connexion directe √† SQLite
    const sequelize = new Sequelize({
      dialect: 'sqlite',
      storage: './data/database.sqlite',
      logging: console.log
    });

    // Tester la connexion
    await sequelize.authenticate();
    console.log('‚úÖ Connexion √† la base de donn√©es √©tablie avec succ√®s.');

    // V√©rifier si la table SequelizeMeta existe
    const [tables] = await sequelize.query(
      "SELECT name FROM sqlite_master WHERE type='table'"
    );
    
    console.log('\nüìã Tables dans la base de donn√©es:');
    console.table(tables);

    // Si la table SequelizeMeta n'existe pas, la cr√©er
    if (!tables.some(t => t.name === 'SequelizeMeta')) {
      console.log('\n‚è≥ Cr√©ation de la table SequelizeMeta...');
      await sequelize.getQueryInterface().createTable('SequelizeMeta', {
        name: {
          type: 'VARCHAR(255)',
          allowNull: false,
          primaryKey: true
        }
      });
      console.log('‚úÖ Table SequelizeMeta cr√©√©e avec succ√®s.');
    }

    // V√©rifier si la table users existe
    const [usersTable] = await sequelize.query(
      "SELECT name FROM sqlite_master WHERE type='table' AND name='users'"
    );

    if (usersTable.length === 0) {
      console.log('\n‚ùå La table users n\'existe pas. Ex√©cution des migrations...');
      const { execSync } = require('child_process');
      execSync('npx sequelize-cli db:migrate --config ./server/config/database.js', { stdio: 'inherit' });
      console.log('‚úÖ Migrations ex√©cut√©es avec succ√®s.');
    } else {
      console.log('\n‚úÖ La table users existe d√©j√†.');
    }

  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification des tables:');
    console.error(error);
    process.exit(1);
  } finally {
    process.exit(0);
  }
}

checkTables().catch(console.error);
